'\"
'\" Copyright (c) 1994, 1995 Hakan Soderstrom and Tom Poindexter
'\" 
'\" Permission to use, copy, modify, distribute, and sell this software
'\" and its documentation for any purpose is hereby granted without fee,
'\" provided that the above copyright notice and this permission notice
'\" appear in all copies of the software and related documentation.
'\" 
'\" THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
'\" EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
'\" WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
'\" 
'\" IN NO EVENT SHALL HAKAN SODERSTROM OR SODERSTROM PROGRAMVARUVERKSTAD
'\" AB BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL
'\" DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
'\" OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF THE POSSIBILITY
'\" OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT OF OR IN
'\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'\" 
'\" $Id: msqltcl.n,v 1.50 1995/06/06 14:25:25 hs Rel $
'\"
'\" Updates by Tobias Ritzau 1998-03-18
'\" Replaced all mysql by mysql
'\" Updated the mysqlconnect documentation
'\" 
'\" 1998-07-06
'\" Changed some mysql back to msql
'\" Updaated the name and introduction
'\" Updated the mysqlcol documentation
'\"
'\" Copyright (c) 1998 Tobias Ritzau
'\"
.TH "MySQLTcl" TCL "" "Tcl"
.ad b
.SH NAME
MySQLTcl - MySQL server access commands for Tcl
.SH "INTRODUCTION"
.P
MySQLTcl is a collection of Tcl commands and a Tcl global array that
provide access to one or more mysql database servers.
.P
MySQLTcl is nothing more than a patched version of a patched version
of Hakan Soderstrom's patch of Tom Poindexter's Sybtcl. Most of the
documentention has been left as it was when I started to work with
this interface (a patch of msqltcl-1.50). However, I have tried to 
replace appropriate occurrences of msql by MySQL.
.P
I have changed the semantics of two commands: mysqlconnect and
mysqlcol. Everything else should work as before. The new versions are described below.
.sp
.SH "MYSQLTCL COMMANDS"
.TP
.B mysqlconnect \fI?option value ...?\fR
.br
Connect to a mysql server.
A handle is returned which should be used in all other mysqltcl
commands using this connection.
mysqlconnect raises a Tcl error if the connection fails.
Possible connection options are:
.RS
.TP
.B -host \fIhostname
.br
The host on which the server is located. The local host is used by default.
.TP
.B -user \fIuser
.br
The user whose name is used for the connection.
The current Unix username is used by default.
.TP
.B -password \fIpassword
.br
The password that must be used for the connection.
If it is not present, the connection is possible only for users with
no password on the server.
.TP
.B -db \fIdb
.br
If this option is present, \fIdb\fR is used as current database, with no need
for a call to \fBmysqluse\fR.
.TP
.B -port \fIport
.br
The port number for the TCP/IP connection, if it's different from the default.
.TP
.B -socket \fIsocket
.br
The socket or named pipe for the connection.
.RE
.TP
.B mysqluse \fIhandle dbname\fR
.br
Associate a connected handle with a particular database.
If successful the handle is said to be \fIin use\fR.
\fIHandle\fR must be a valid handle previously obtained from mysqlconnect.
.sp
Mysqluse raises a Tcl error if the handle is not connected or
if the database name specified could not be used.
.sp
.TP
.B mysqlsel \fIhandle sql-statement ?-list|-flatlist?\fR
.br
Send \fIsql-statement\fR to the server.
The \fIhandle\fR must be in use (through mysqlconnect and mysqluse).
.sp
If \fIsql-statement\fR is a SELECT statement and no \fI-list\fR or
\fI-flatlist\fR option is specified, the command returns the
number of rows returned as the result of the query.
The rows can be obtained by the \fImysqlnext\fR and/or the
\fImysqlmap\fR commands.
The resulting rows are called the \fIpending result\fR.
.sp
If \fIsql-statement\fR is a SELECT statement and \fI-list\fR or \fI-flatlist\fR
is specified, the command returns the full list of rows returned as 
the result of the query in one of two possible formats:
.IP [1]
\fI-list\fR generates a list of lists, in which each element is a row of the
result.
.IP [2]
\fI-flatlist\fR generates the concatenation of all rows in a single list, which 
is useful for scanning with a single \fBforeach\fR.
.sp
An example is in order:\fB
.br
	% mysqlsel $db "SELECT ID, NAME FROM FRIENDS" -list
.br
	{1 Joe} {2 Phil} {3 John}
.br
	% mysqlsel $db "SELECT ID, NAME FROM FRIENDS" -flatlist
.br
	{1 Joe 2 Phil 3 John}
.sp
\fR
Note that both list syntaxes are faster than something like\fB
.br
    % mysqlsel $db "SELECT ID, NAME FROM FRIENDS"
.br
    3
.br
    % mysqlmap $db {id name} {lappend result $id $name}
.br
    % puts $result
.br
	{1 Joe 2 Phil 3 John}
.sp
\fR
If \fIsql-statement\fR is a valid mysql statement, but not a SELECT
statement, the command returns -1 after executing the statement, or an empty 
string if \fI-list\fR or \fI-flatlist\fR is specified.
There is no pending result in this case.
.sp
In any case mysqlsel implicitly cancels any previous result still
pending for the handle.
.sp
.TP
.B mysqlexec \fIhandle sql-statement\fR
.br
Send \fIsql-statement\fR, a mysql non-SELECT statement, to the server.
The \fIhandle\fR must be in use (through mysqlconnect and mysqluse).
.sp
Mysqlexec implicitly cancels any previous result pending for the handle.
.sp
If \fIsql-statement\fR is a valid mysql SELECT statement, the statement
is executed, but the result is discarded.
No Tcl error is generated.
This amounts to a (potentially costly) no-op.
Use the mysqlsel command for SELECT statements.
.sp
.TP
.B mysqlnext \fIhandle\fR
.br
Return the next row of the pending result (from a previous mysqlsel command).
The row is returned as a Tcl list.
Each list element contains the value of one column.
The order is determined by the SELECT statement.
A null column is converted to the current value of
mysqlstatus(nullvalue).
If there are no more rows the command returns an empty list.
.sp
Mysqlnext raises a Tcl error if there is no pending result for \fIhandle\fR.
.sp
.TP
.B mysqlmap \fIhandle binding-list script\fR
.br
Iterate a script over the rows of the pending result.
Mysqlmap may consume all rows or only some of the rows of the pending
result.
Any remaining rows may be obtained by further mysqlnext or mysqlmap
commands.
.sp
\fIHandle\fR must be a handle with a pending result from a previous
mysqlsel command.
\fIBinding-list\fR must be a list of one or more variable names.
\fIScript\fR must be a Tcl script.
It may be empty, but usually it contains one or more commands.
.sp
Mysqlmap processes one row at a time from the pending result.
For each row the column values are bound to the variables in the
binding list, then the script is executed.
Binding is strictly positional.
The first variable in the binding list is bound to the first column of
the row, and so on.
The variables are created in the current context (if they do not
already exist).
A variable name beginning with a hyphen is not bound; it serves as a
placeholder in the binding list.
If there are more columns than variables the extra columns are
ignored.
.sp
The mysqlmap command is similar to an ordinary \fBforeach\fR.
A \fBforeach\fR iterates over the elements of a list, mysqlmap
iterates over the rows of a pending result.
In both cases iteration is affected by \fBbreak\fR and \fBcontinue\fR
Tcl commands.
The binding list variables retain their last values after the command
has completed.
.sp
A simple example follows.
Assume $db is a handle in use.\fB
.sp
	mysqlsel $db {select lname, fname, area, phone from friends
.br
		order by lname, fname}
.br
	mysqlmap $db {ln fn - phone} {
.br
		if {$phone == {}} continue
.br
		puts [format "%16s %-8s %s" $ln $fn $phone]
.br
	}\fR
.br
.sp
The mysqlsel command gets and sorts all rows from table \fIfriends\fR.
The mysqlmap command is used to format and print the result in a way
suitable for a phone list.
For demonstration purposes one of the columns (area) is not used.
The script begins by skipping over rows which have no phone number.
The second command in the script formats and prints values from the row.
.sp
Mysqlmap raises a Tcl error if there is no pending result for
\fIhandle\fR, or if \fIbinding-list\fR contains more variables than
there are columns in the pending result.
.sp
.TP
.B mysqlseek \fIhandle row-index\fR
.br
Moves the current position among the rows in the pending result.
This may cause \fImysqlnext\fR and \fImysqlmap\fR to re-read rows, or to
skip over rows.
.sp
Row index 0 is the position just before the first row in the pending result;
row index 1 is the position just before the second row, and so
on.
You may specify a negative row index.
Row index -1 is the position just before the last row;
row index -2 is the position just before the second last row,
and so on.
An out-of-bounds row index will cause mysqlseek to set the new current
position either just before the first row (if the index is too negative),
or just after the last row (if the index exceeds the number of rows).
This is not an error condition.
.sp
Mysqlseek returns the number of rows that can be read sequentially from
the new current position.
Mysqlseek raises a Tcl error if there is no pending result for \fIhandle\fR.
.sp
Portability note: The functionality of \fImysqlseek\fR is frequently
absent in other Tcl extensions for SQL.
.sp
.TP 
.B mysqlcol \fIhandle table-name option\fR
.TP
.B mysqlcol \fIhandle table-name option-list\fR
.TP
.B mysqlcol \fIhandle table-name option ?option ...?\fR
.br
Return information about the columns of a table.
\fIHandle\fR must be in use.
\fITable-name\fR must be the name of a table; it may be a table name
or \fB-current\fR if there is a pending result.
One or more options control what information to return.
Each option must be one of the following keywords.
.RS
.TP
.B name
.br
Return the name of a column.
.TP
.B type
.br
Return the type of a column; one of the strings \fBdecimal\fR,
\fBtiny\fR, \fBshort\fR, \fBlong\fR, \fBfloat\fR, \fBdouble\fR,
\fBnull\fR, \fBtimestamp\fR, \fBlong long\fR, \fBint24\fR, \fBdate\fR,
\fBtime\fR, \fBdate time\fR, \fByear\fR, \fBnew date\fR, \fBenum\fR,
\fBset\fR, \fBtiny blob\fR, \fBmedium blob\fR, \fBlong blob\fR,
\fBblob\fR, \fBvar string\fR, or \fBstring\fR.
Note that a column of type \fBchar\fR will return tiny, while they are 
represented equally.
.TP
.B length
.br
Return the length of a column in bytes.
.TP
.B table
.br
Return the name of the table in which this column occurs.
.TP
.B non_null
.br
Return the string ``1'' if the column is non-null; otherwise ``0''.
.TP
.B prim_key
.br
Return the string ``1'' if the column is part of the primary key;
otherwise ``0''.
.RE
.sp
The three forms of this command generate their result in a
particular way.
.IP [1]
If a single option is present the result is a simple list of
values; one for each column.
.IP [2]
If the options are given in the form of an option list the
result is a list of lists.
Each sublist corresponds to a column and contains the information
specified by the options.
.IP [3]
If several options are given, but not in a list, the result is also
a list of lists.
In this case each sublist corresponds to an option and contains one
value for each column.
.sp
The following is a sample interactive session containing all forms of
the mysqlcol command and their results.
The last command uses the \fB-current\fR option.
It could alternatively specify the table name explicitly.\fB
.sp
	% mysqlcol $db friends name
.br
	fname lname area phone
.br
	% mysqlcol $db friends {name type length}
.br
	{fname char 12} {lname char 20} {area char 5} {phone char 12}
.br
	% mysqlsel $db {select * from friends}
.br
	% mysqlcol $db -current name type length
.br
	{fname lname area phone} {char char char char} {12 20 5 12}\fR
.sp
.TP 
.B mysqlinfo \fIhandle option\fR
.br
Return various database information depending on the \fIoption\fR.
The option must be one of the following keywords.
.RS
.TP
.B databases
.br
Return a list of all database names known to the server.
The handle must be connected.
.TP
.B dbname
.br
Return the name of the database with which the handle is associated.
The handle must be in use.
.TP
.B dbname?
.br
Return the name of the database with which the handle is associated;
an empty string if the handle is connected, but not in use.
.TP
.B host
.br
Return the name of the host to which the handle is connected.
The handle must be connected.
.TP
.B host?
.br
Return the name of the host to which the handle is connected; an empty
string if the handle is not connected.
.TP
.B tables
.br
Return a list of all table names in the database with which the handle
is associated.
The handle must be in use.
.RE
.TP 
.B mysqlresult \fIhandle option\fR
.br
Return information about the pending result.
Note that a result is pending until cancelled by a mysqlexec command,
even if no rows remain to be read.
\fIOption\fR must be one of the following keywords.
.RS
.TP
.B cols
.br
Return the number of columns in the pending result.
There must be a pending result.
.TP
.B cols?
.br
Return the number of columns in the pending result; an empty string if
no result is pending.
.TP
.B current
.br
Return the current position in the pending result; a non-negative integer.
This value can be used as \fIrow-index\fR in the mysqlseek command.
An error is raised if there is no pending result.
.TP
.B current?
.br
As above, but returns an empty string if there is no pending result.
.TP
.B rows
.br
Return the number of rows that can be read sequentially from the
current position in the pending result.
There must be a pending result.
.TP
.B rows?
.br
Return the number of rows that can be read sequentially from the
current position in the pending result; an empty string if no result
is pending.
.sp
.IP \(bu
Note that
.B [mysqlresult $db current] + [mysqlresult $db rows]
always equals the total number of rows in the pending result.
.RE
.TP 
.B mysqlstate \fIhandle ?-numeric?\fR
.br
Return the state of a handle as a string or in numeric form.
There is no requirement on \fIhandle\fR; it may be any string.
The return value is one of the following strings, or the corresponding
numeric value if \fB-numeric\fR is specified.
The states form a progression where each state builds on the previous.
.RS
.TP
.B NOT_A_HANDLE (0)
.br
The string supplied for \fIhandle\fR is not a mysqltcl handle at all.
.TP
.B UNCONNECTED (1)
.br
The string supplied for \fIhandle\fR is one of the possible mysqltcl
handles, but it is not connected to any server.
.TP
.B CONNECTED (2)
.br
The handle is connected to a server, but not associated with a database.
.TP
.B IN_USE (3)
.br
The handle is connected and associated with a database, but there is
no pending result.
.TP
.B RESULT_PENDING (4)
.br
The handle is connected, associated with a database, and there is a
pending result.
.RE
.sp
.TP 
.B mysqlclose \fI?handle?\fR
.br
Closes the server connection associated with \fIhandle\fR, causing it
to go back to the unconnected state.
Closes all connections if \fIhandle\fR is omitted.
Returns an empty string.
Mysqlclose raises a Tcl error if a handle is specified which is not
connected.
.sp
.TP 
.B mysqlinsertid \fIhandle\fR
.br
Returns the auto increment id of the last INSERT statement.
.sp
.TP 
.B mysqlescape \fIstring\fR
.br
Returns the content of \fIstring\fR, with all special characters escaped,
so that it is suitable for use in an SQL statement. This is simpler (faster?)
than using a general \fBregexp\fR.
.sp
.SH "STATUS INFORMATION"
.P
Mysqltcl creates and maintains a Tcl global array to provide status
information. 
Its name is \fBmysqlstatus\fR.
.P
Mysqlstatus elements:
.TP
.B code
.br
A numeric conflict code set after every mysqltcl command.
Zero means no conflict; non-zero means some kind of conflict.
All conflicts also generate a Tcl error.
.sp
All mysql server conflicts set mysqlstatus(code) to the numeric
code of the mysql error.
.br
Any other conflict sets mysqlstatus(code) to -1.
.TP
.B command
.br
The last failing mysqltcl command.
Not updated for successful commands.
.TP
.B message
.br
Message string for the last conflict detected.
The same string is returned as the result of the failing mysqltcl
command.
Not updated for successful commands.
.TP
.B nullvalue
.br
The string to use in query results to represent the SQL null value.
The empty string is used initially.
You may set it to another value.
.sp
.SH ENVIRONMENT VARIABLES
.P
None.
.sp
.SH BUGS & POSSIBLE MISFEATURES
.P
Sure.
.P
Some of the options of the information commands (mysqlinfo, mysqlresult,
mysqlcol, mysqlstate) keep returning results even if the mysql server has
ceased to exist.
.P
Deleting any of the mysqltcl commands closes all connections.
.sp
.SH AUTHORS
Tobias Ritzau (tobri@ida.liu.se)
.br
Paolo Brutti (Paolo.Brutti@tlsoft.it)
.br
Artur Trzewik (mail@xdobry.de)
.br
MySQLTcl is derived from a patch of msql by Hakan Soderstrom (hs@soderstrom.se), Soderstrom Programvaruverkstad,
S-12242 Enskede, Sweden.
msql is derived from Sybtcl by Tom Poindexter (tpoindex@nyx.cs.du.edu).
.sp
$Revision: 1.50 $



